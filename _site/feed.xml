<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-02T17:17:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TIL</title><subtitle>by Jang</subtitle><entry><title type="html">DFS,BFS의 기본개념(python)</title><link href="http://localhost:4000/algorism/2022/07/01/post.html" rel="alternate" type="text/html" title="DFS,BFS의 기본개념(python)" /><published>2022-07-01T12:20:23+09:00</published><updated>2022-07-01T12:20:23+09:00</updated><id>http://localhost:4000/algorism/2022/07/01/post</id><content type="html" xml:base="http://localhost:4000/algorism/2022/07/01/post.html"><![CDATA[<h1 id="dfs">DFS</h1>
<h3 id="기본개념dfs는-깊이-우선-탐색이라고-부르며-그래프에서-깊은-부분을-우선적으로-탐색한다">기본개념:DFS는 깊이 우선 탐색이라고 부르며 그래프에서 깊은 부분을 우선적으로 탐색한다.</h3>
<h3 id="장점-적은-메모리를-사용한다-찾으려는-노드가-깊은곳에-있는경우-bfs보다-빠르게-찾을-수-있다">장점: 적은 메모리를 사용한다, 찾으려는 노드가 깊은곳에 있는경우 BFS보다 빠르게 찾을 수 있다.</h3>
<h3 id="단점-해가-없는-경로여도-끝까지-탐색한다-dfs로-얻은-해가-최단-경로라는-보장이-없다">단점: 해가 없는 경로여도 끝까지 탐색한다, DFS로 얻은 해가 최단 경로라는 보장이 없다.</h3>
<h3 id="주로-사용되는-문제-백트래킹-사이클-찾기-위상정렬">주로 사용되는 문제: 백트래킹, 사이클 찾기, 위상정렬</h3>
<h3 id="dfs는-다음과-같이-재귀함수를-사용시-간결하게-구현할-수-있다">DFS는 다음과 같이 재귀함수를 사용시 간결하게 구현할 수 있다.</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">visited</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="bfs">BFS</h1>
<h3 id="기본개념-bfs는-너비-우선-탐색이라는-의미를-가지며-가까운-노드부터-탐색한다">기본개념: BFS는 너비 우선 탐색이라는 의미를 가지며 가까운 노드부터 탐색한다.</h3>
<h3 id="장점-항상-최적의해를-찾음을-보장한다">장점: 항상 최적의해를 찾음을 보장한다.</h3>
<h3 id="단점-최악의-경우에-가장-긴-시간이-걸린다">단점: 최악의 경우에 가장 긴 시간이 걸린다.</h3>
<h3 id="주로-사용되는-문제-최단거리-위상정렬">주로 사용되는 문제: 최단거리, 위상정렬</h3>
<h3 id="bfs는-다음과-같이-큐를-이용하여-구현할수-있다">BFS는 다음과 같이 큐를 이용하여 구현할수 있다</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collecions</span> <span class="kn">import</span> <span class="n">deque</span> 

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>
    <span class="n">que</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="n">start</span><span class="p">])</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">v</span><span class="o">=</span><span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="bp">True</span> 
</code></pre></div></div>]]></content><author><name></name></author><category term="algorism" /><summary type="html"><![CDATA[DFS 기본개념:DFS는 깊이 우선 탐색이라고 부르며 그래프에서 깊은 부분을 우선적으로 탐색한다. 장점: 적은 메모리를 사용한다, 찾으려는 노드가 깊은곳에 있는경우 BFS보다 빠르게 찾을 수 있다. 단점: 해가 없는 경로여도 끝까지 탐색한다, DFS로 얻은 해가 최단 경로라는 보장이 없다. 주로 사용되는 문제: 백트래킹, 사이클 찾기, 위상정렬 DFS는 다음과 같이 재귀함수를 사용시 간결하게 구현할 수 있다. def dfs(graph, v, visited): visited[v]=True print(v,end=' ') for i in graph[v]: if not visited[i]: dfs(graph,i,visited)]]></summary></entry><entry><title type="html">DFS와 BFS[1260번]</title><link href="http://localhost:4000/baekjoon/2022/07/01/post1.html" rel="alternate" type="text/html" title="DFS와 BFS[1260번]" /><published>2022-07-01T12:20:23+09:00</published><updated>2022-07-01T12:20:23+09:00</updated><id>http://localhost:4000/baekjoon/2022/07/01/post1</id><content type="html" xml:base="http://localhost:4000/baekjoon/2022/07/01/post1.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/1260">백준 1260번 DFS와 BFS 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/176890532-e69c377d-7e25-4f97-8d8e-18aeaf0ded00.png" alt="백준 1260번 문제" width="1000" height="1000" /></p>

<h1 id="문제해설-dfs와-bfs의-기본알고리즘을-사용할수-있는지에-대한-문제이다">문제해설: DFS와 BFS의 기본알고리즘을 사용할수 있는지에 대한 문제이다.</h1>
<h1 id="문제코드">문제코드:</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">print</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">start</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">start</span><span class="p">):</span>
    <span class="n">que</span><span class="o">=</span><span class="n">deque</span><span class="p">([</span><span class="n">start</span><span class="p">])</span> 
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">v</span><span class="o">=</span><span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>

<span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">v</span><span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="n">visited</span><span class="o">=</span><span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="p">)):</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sort</span><span class="p">()</span>
<span class="n">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="n">visited</span><span class="o">=</span><span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="baekjoon" /><summary type="html"><![CDATA[백준 1260번 DFS와 BFS 문제링크]]></summary></entry></feed>