<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-06T23:01:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TIL</title><subtitle>by Jang</subtitle><entry><title type="html">단지번호붙이기[백준 2667번]</title><link href="http://localhost:4000/algorithm/2022/07/05/post.html" rel="alternate" type="text/html" title="단지번호붙이기[백준 2667번]" /><published>2022-07-05T20:21:00+09:00</published><updated>2022-07-05T20:21:00+09:00</updated><id>http://localhost:4000/algorithm/2022/07/05/post</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/05/post.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2667">백준 2667번 바이러스 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/177326030-8df23f04-b17e-4b37-abe6-06255c025044.png" alt="백준 2667번 문제" width="1000" height="1000" /></p>

<h1 id="문제해설-이-문제는-카테고리를-분류해보면-전염성-문제와-유사하다고-볼-수있다-따라서-dfs를-사용하여-주변에-집이있는곳을-파악하고-가구수를-리스트에-저장한-후-출력하면-되는-문제이다">문제해설: 이 문제는 카테고리를 분류해보면 전염성 문제와 유사하다고 볼 수있다 따라서 DFS를 사용하여 주변에 집이있는곳을 파악하고 가구수를 리스트에 저장한 후 출력하면 되는 문제이다</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[]</span><span class="c1">#맵의 정보를 저장하기위한 리스트
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span><span class="c1">#정보저장
</span>    <span class="n">graph</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">())))</span>

<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span> <span class="c1">#DFS정의
</span>    <span class="k">if</span> <span class="n">x</span><span class="o">&gt;=</span><span class="n">N</span> <span class="ow">or</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">y</span><span class="o">&gt;=</span><span class="n">N</span> <span class="ow">or</span> <span class="n">y</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">if</span> <span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span><span class="c1">#1 즉 집을 만날때 집의 수를 센후 그 자리의 집을 지운다
</span>        <span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">global</span> <span class="n">count</span>
        <span class="n">count</span><span class="o">+=</span><span class="mi">1</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
<span class="n">total</span><span class="o">=</span><span class="mi">0</span>
<span class="n">result</span><span class="o">=</span><span class="p">[]</span> 
<span class="n">count</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>  
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">==</span><span class="bp">True</span><span class="p">:</span>
            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
            <span class="n">total</span><span class="o">+=</span><span class="mi">1</span>
            <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
<span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span><span class="c1">#집의 집단수 출력 
</span><span class="n">result</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span><span class="c1">#집의수가 적은단위부터 출력하기 위한 정렬 
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span><span class="c1">#집단속 집의 숫자 출력 
</span>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[백준 2667번 바이러스 문제링크]]></summary></entry><entry><title type="html">토마토[백준 7569번]</title><link href="http://localhost:4000/algorithm/2022/07/05/post.html" rel="alternate" type="text/html" title="토마토[백준 7569번]" /><published>2022-07-05T20:21:00+09:00</published><updated>2022-07-05T20:21:00+09:00</updated><id>http://localhost:4000/algorithm/2022/07/05/post</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/05/post.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2667">백준 7569번 바이러스 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/177326030-8df23f04-b17e-4b37-abe6-06255c025044.png" alt="백준 7569번 문제" width="1000" height="1000" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">h</span><span class="o">=</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span> <span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[]</span>
<span class="n">ripe</span><span class="o">=</span><span class="n">deque</span><span class="p">()</span>
<span class="n">dx</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dz</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">h</span><span class="p">):</span>
  <span class="n">tmp</span><span class="o">=</span><span class="p">[]</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">ripe</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">))</span>
  <span class="n">graph</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">ripe</span><span class="p">)</span> <span class="p">:</span>
  <span class="k">while</span> <span class="n">ripe</span><span class="p">:</span>
    <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="o">=</span><span class="n">ripe</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
      <span class="n">nx</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
      <span class="n">ny</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
      <span class="n">nz</span><span class="o">=</span><span class="n">z</span><span class="o">+</span><span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
      <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">nx</span><span class="o">&lt;</span><span class="n">h</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">ny</span><span class="o">&lt;</span><span class="n">n</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">nz</span><span class="o">&lt;</span><span class="n">m</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">graph</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">nz</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
          <span class="n">graph</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">nz</span><span class="p">]</span><span class="o">=</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">][</span><span class="n">z</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
          <span class="n">ripe</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span><span class="n">nz</span><span class="p">))</span>
<span class="n">bfs</span><span class="p">(</span><span class="n">ripe</span><span class="p">)</span> 
<span class="n">day</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">i</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">j</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">day</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">day</span><span class="p">,</span><span class="nb">max</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">day</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[백준 7569번 바이러스 문제링크]]></summary></entry><entry><title type="html">바이러스[백준 2606번]</title><link href="http://localhost:4000/algorithm/2022/07/02/post1.html" rel="alternate" type="text/html" title="바이러스[백준 2606번]" /><published>2022-07-02T18:17:00+09:00</published><updated>2022-07-02T18:17:00+09:00</updated><id>http://localhost:4000/algorithm/2022/07/02/post1</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/02/post1.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2606">백준 2606번 바이러스 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/176994569-fcee6521-9049-4b43-93f1-b7dc5fdabb74.png" alt="백준 2606번 문제" width="1000" height="1000" /></p>

<h1 id="문제해설-이-문제는-전염성-문제로-깊이-우선-탐색-즉-dfs를-이용하여-가장-깊이-있는-노드를-까지-가는데에-있어서-거쳐야하는-노드의-수를-구하면-되는-문제다">문제해설: 이 문제는 전염성 문제로 깊이 우선 탐색 즉 DFS를 이용하여 가장 깊이 있는 노드를 까지 가는데에 있어서 거쳐야하는 노드의 수를 구하면 되는 문제다</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">start</span><span class="p">):</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">global</span> <span class="n">cnt</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">start</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
            <span class="n">cnt</span><span class="o">+=</span><span class="mi">1</span> <span class="c1">##노드를 거칠때마다 카운트수 +1
</span>            <span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>


<span class="n">n</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">v</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">visited</span><span class="o">=</span><span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="c1">#노드들의 기본정보를 담는 리스트
</span><span class="n">cnt</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">v</span><span class="p">):</span> <span class="c1">#서로 연결해주기 위한 반복문
</span>    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[백준 2606번 바이러스 문제링크]]></summary></entry><entry><title type="html">미로찾기[백준 2178번]</title><link href="http://localhost:4000/algorithm/2022/07/02/post.html" rel="alternate" type="text/html" title="미로찾기[백준 2178번]" /><published>2022-07-02T17:30:00+09:00</published><updated>2022-07-02T17:30:00+09:00</updated><id>http://localhost:4000/algorithm/2022/07/02/post</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/02/post.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2178">백준 2178번 미로찾기 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/176993357-157dcfbb-7807-40a3-b861-1aa9fe317bc2.png" alt="백준 2178번 문제" width="1000" height="1000" /></p>

<h2 id="문제해설-문제에서-요구하는것이-미로-11에서-nm의-좌표까지-가는-최단거리를-구하는것이므로-bfs-알고리즘을-통해-문제를-해결할-수-있고-각각의-위치를-좌표화-하여-푸는것이-문제의-해법이다">문제해설: 문제에서 요구하는것이 미로 (1,1)에서 (N,M)의 좌표까지 가는 최단거리를 구하는것이므로 BFS 알고리즘을 통해 문제를 해결할 수 있고 각각의 위치를 좌표화 하여 푸는것이 문제의 해법이다.</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="n">que</span><span class="o">=</span><span class="n">deque</span><span class="p">()</span>
    <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>    
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c1">#현재 위치에서 갈수있는 x좌표
</span>            <span class="n">ny</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c1">#현재 위치에서 갈수있는 y좌표 
</span>            <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">nx</span><span class="o">&lt;</span><span class="n">n</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">ny</span><span class="o">&lt;</span><span class="n">m</span> <span class="ow">and</span> <span class="n">graph</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span> <span class="c1">#맵밖으로 나가지 않으면서 0이아닌 위치라면
</span>                <span class="n">graph</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">=</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="c1"># 시작지점에서 그 위치까지의 최단거리 계산
</span>                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>         

    <span class="k">return</span> <span class="n">graph</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
 
<span class="n">dx</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="c1">#x좌표위치를 계산하기 위한 리스트
</span><span class="n">dy</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="c1">#y좌표위치를 계산하기 위한 리스트
</span>
<span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="o">=</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">graph</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">())))</span>

<span class="k">print</span><span class="p">(</span><span class="n">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[백준 2178번 미로찾기 문제링크]]></summary></entry><entry><title type="html">DFS,BFS의 기본개념(python)</title><link href="http://localhost:4000/algorithm/2022/07/01/post.html" rel="alternate" type="text/html" title="DFS,BFS의 기본개념(python)" /><published>2022-07-01T12:20:23+09:00</published><updated>2022-07-01T12:20:23+09:00</updated><id>http://localhost:4000/algorithm/2022/07/01/post</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/01/post.html"><![CDATA[<h1 id="dfs">DFS</h1>
<h3 id="기본개념dfs는-깊이-우선-탐색이라고-부르며-그래프에서-깊은-부분을-우선적으로-탐색한다">기본개념:DFS는 깊이 우선 탐색이라고 부르며 그래프에서 깊은 부분을 우선적으로 탐색한다.</h3>
<h3 id="장점-적은-메모리를-사용한다-찾으려는-노드가-깊은곳에-있는경우-bfs보다-빠르게-찾을-수-있다">장점: 적은 메모리를 사용한다, 찾으려는 노드가 깊은곳에 있는경우 BFS보다 빠르게 찾을 수 있다.</h3>
<h3 id="단점-해가-없는-경로여도-끝까지-탐색한다-dfs로-얻은-해가-최단-경로라는-보장이-없다">단점: 해가 없는 경로여도 끝까지 탐색한다, DFS로 얻은 해가 최단 경로라는 보장이 없다.</h3>
<h3 id="주로-사용되는-문제-백트래킹-사이클-찾기-위상정렬">주로 사용되는 문제: 백트래킹, 사이클 찾기, 위상정렬</h3>
<h3 id="dfs는-다음과-같이-재귀함수를-사용시-간결하게-구현할-수-있다">DFS는 다음과 같이 재귀함수를 사용시 간결하게 구현할 수 있다.</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">visited</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="bfs">BFS</h1>
<h3 id="기본개념-bfs는-너비-우선-탐색이라는-의미를-가지며-가까운-노드부터-탐색한다">기본개념: BFS는 너비 우선 탐색이라는 의미를 가지며 가까운 노드부터 탐색한다.</h3>
<h3 id="장점-항상-최적의해를-찾음을-보장한다">장점: 항상 최적의해를 찾음을 보장한다.</h3>
<h3 id="단점-최악의-경우에-가장-긴-시간이-걸린다">단점: 최악의 경우에 가장 긴 시간이 걸린다.</h3>
<h3 id="주로-사용되는-문제-최단거리-위상정렬">주로 사용되는 문제: 최단거리, 위상정렬</h3>
<h3 id="bfs는-다음과-같이-큐를-이용하여-구현할수-있다">BFS는 다음과 같이 큐를 이용하여 구현할수 있다</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collecions</span> <span class="kn">import</span> <span class="n">deque</span> 

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>
    <span class="n">que</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="n">start</span><span class="p">])</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">v</span><span class="o">=</span><span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="bp">True</span> 
</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[DFS 기본개념:DFS는 깊이 우선 탐색이라고 부르며 그래프에서 깊은 부분을 우선적으로 탐색한다. 장점: 적은 메모리를 사용한다, 찾으려는 노드가 깊은곳에 있는경우 BFS보다 빠르게 찾을 수 있다. 단점: 해가 없는 경로여도 끝까지 탐색한다, DFS로 얻은 해가 최단 경로라는 보장이 없다. 주로 사용되는 문제: 백트래킹, 사이클 찾기, 위상정렬 DFS는 다음과 같이 재귀함수를 사용시 간결하게 구현할 수 있다. def dfs(graph, v, visited): visited[v]=True print(v,end=' ') for i in graph[v]: if not visited[i]: dfs(graph,i,visited)]]></summary></entry><entry><title type="html">DFS와 BFS[백준 1260번]</title><link href="http://localhost:4000/algorithm/2022/07/01/post1.html" rel="alternate" type="text/html" title="DFS와 BFS[백준 1260번]" /><published>2022-07-01T12:20:23+09:00</published><updated>2022-07-01T12:20:23+09:00</updated><id>http://localhost:4000/algorithm/2022/07/01/post1</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/07/01/post1.html"><![CDATA[<p><a href="https://www.acmicpc.net/problem/1260">백준 1260번 DFS와 BFS 문제링크</a></p>

<p><img src="https://user-images.githubusercontent.com/77001421/176890532-e69c377d-7e25-4f97-8d8e-18aeaf0ded00.png" alt="백준 1260번 문제" width="1000" height="1000" /></p>

<h1 id="문제해설-dfs와-bfs의-기본알고리즘을-사용할수-있는지에-대한-문제이다">문제해설: DFS와 BFS의 기본알고리즘을 사용할수 있는지에 대한 문제이다.</h1>
<h1 id="문제코드">문제코드:</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">start</span><span class="p">):</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">print</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">start</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">start</span><span class="p">):</span>
    <span class="n">que</span><span class="o">=</span><span class="n">deque</span><span class="p">([</span><span class="n">start</span><span class="p">])</span> 
    <span class="n">visited</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>
    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">v</span><span class="o">=</span><span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="bp">True</span>

<span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">v</span><span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">graph</span><span class="o">=</span><span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="n">visited</span><span class="o">=</span><span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="p">)):</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sort</span><span class="p">()</span>
<span class="n">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="n">visited</span><span class="o">=</span><span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">bfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="algorithm" /><summary type="html"><![CDATA[백준 1260번 DFS와 BFS 문제링크]]></summary></entry></feed>